Description: Python3.12: s/assert_equals/assert_equal/
Bug-Debian: https://bugs.debian.org/1058147
Author: Andreas Tille <tille@debian.org>
Last-Update: Mon, 15 Jan 2024 14:03:39 +0100

--- a/ipython_genutils/tests/test_path.py
+++ b/ipython_genutils/tests/test_path.py
@@ -8,9 +8,8 @@
 import sys
 import tempfile
 
-import nose.tools as nt
+import pytest
 
-from ..testing.decorators import skip_if_not_win32, skip_win32
 from .. import path
 from .. import py3compat
 from ..tempdir import TemporaryDirectory
@@ -29,43 +28,39 @@
         path.ensure_dir_exists(d) # no-op
         f = os.path.join(td, u'Æ’ile')
         open(f, 'w').close() # touch
-        with nt.assert_raises(IOError):
+        with pytest.raises(IOError):
             path.ensure_dir_exists(f)
 
 
 class TestLinkOrCopy(object):
-    def setUp(self):
+    def setup_method(self):
         self.tempdir = TemporaryDirectory()
         self.src = self.dst("src")
         with open(self.src, "w") as f:
             f.write("Hello, world!")
 
-    def tearDown(self):
+    def teardown_method(self):
         self.tempdir.cleanup()
 
     def dst(self, *args):
         return os.path.join(self.tempdir.name, *args)
 
     def assert_inode_not_equal(self, a, b):
-        nt.assert_not_equals(os.stat(a).st_ino, os.stat(b).st_ino,
-                             "%r and %r do reference the same indoes" %(a, b))
+        assert os.stat(a).st_ino != os.stat(b).st_ino, "%r and %r do reference the same indoes" %(a, b)
 
     def assert_inode_equal(self, a, b):
-        nt.assert_equals(os.stat(a).st_ino, os.stat(b).st_ino,
-                         "%r and %r do not reference the same indoes" %(a, b))
+        assert os.stat(a).st_ino == os.stat(b).st_ino, "%r and %r do not reference the same indoes" %(a, b)
 
     def assert_content_equal(self, a, b):
         with open(a) as a_f:
             with open(b) as b_f:
-                nt.assert_equals(a_f.read(), b_f.read())
+                assert a_f.read() == b_f.read()
 
-    @skip_win32
     def test_link_successful(self):
         dst = self.dst("target")
         path.link_or_copy(self.src, dst)
         self.assert_inode_equal(self.src, dst)
 
-    @skip_win32
     def test_link_into_dir(self):
         dst = self.dst("some_dir")
         os.mkdir(dst)
@@ -73,14 +68,12 @@
         expected_dst = self.dst("some_dir", os.path.basename(self.src))
         self.assert_inode_equal(self.src, expected_dst)
 
-    @skip_win32
     def test_target_exists(self):
         dst = self.dst("target")
         open(dst, "w").close()
         path.link_or_copy(self.src, dst)
         self.assert_inode_equal(self.src, dst)
 
-    @skip_win32
     def test_no_link(self):
         real_link = os.link
         try:
@@ -92,12 +85,6 @@
         finally:
             os.link = real_link
 
-    @skip_if_not_win32
-    def test_windows(self):
-        dst = self.dst("target")
-        path.link_or_copy(self.src, dst)
-        self.assert_content_equal(self.src, dst)
-
     def test_link_twice(self):
         # Linking the same file twice shouldn't leave duplicates around.
         # See https://github.com/ipython/ipython/issues/6450
@@ -105,4 +92,4 @@
         path.link_or_copy(self.src, dst)
         path.link_or_copy(self.src, dst)
         self.assert_inode_equal(self.src, dst)
-        nt.assert_equal(sorted(os.listdir(self.tempdir.name)), ['src', 'target'])
+        assert sorted(os.listdir(self.tempdir.name)) == ['src', 'target']
--- a/ipython_genutils/tests/test_text.py
+++ b/ipython_genutils/tests/test_text.py
@@ -10,7 +10,6 @@
 import random
 import sys
 
-import nose.tools as nt
 
 from .. import text
 
@@ -20,11 +19,11 @@
     size = 5
     items = [l*size for l in 'abc']
     out = text.columnize(items, displaywidth=80)
-    nt.assert_equal(out, 'aaaaa  bbbbb  ccccc\n')
+    assert out == 'aaaaa  bbbbb  ccccc\n'
     out = text.columnize(items, displaywidth=12)
-    nt.assert_equal(out, 'aaaaa  ccccc\nbbbbb\n')
+    assert out == 'aaaaa  ccccc\nbbbbb\n'
     out = text.columnize(items, displaywidth=10)
-    nt.assert_equal(out, 'aaaaa\nbbbbb\nccccc\n')
+    assert out == 'aaaaa\nbbbbb\nccccc\n'
 
 def test_columnize_random():
     """Test with random input to hopfully catch edge case """
@@ -48,12 +47,12 @@
     size = 40
     items = [l*size for l in 'abc']
     out = text.columnize(items, displaywidth=80)
-    nt.assert_equal(out, '\n'.join(items+['']))
+    assert out == '\n'.join(items+[''])
 
 def test_columnize_long():
     """Test columnize with inputs longer than the display window"""
     size = 11
     items = [l*size for l in 'abc']
     out = text.columnize(items, displaywidth=size-1)
-    nt.assert_equal(out, '\n'.join(items+['']))
+    assert out == '\n'.join(items+[''])
 
--- a/ipython_genutils/tests/test_importstring.py
+++ b/ipython_genutils/tests/test_importstring.py
@@ -3,7 +3,7 @@
 # Copyright (c) IPython Development Team.
 # Distributed under the terms of the Modified BSD License.
 
-import nose.tools as nt
+import pytest
 
 from ..importstring import import_item
 
@@ -11,17 +11,17 @@
     "Test simple imports"
     import os
     os2 = import_item('os')
-    nt.assert_true(os is os2)
+    assert os is os2
 
 
 def test_import_nested():
     "Test nested imports from the stdlib"
     from os import path
     path2 = import_item('os.path')
-    nt.assert_true(path is path2)
+    assert path is path2
 
 
 def test_import_raises():
     "Test that failing imports raise the right exception"
-    nt.assert_raises(ImportError, import_item, 'IPython.foobar')
+    pytest.raises(ImportError, import_item, 'IPython.foobar')
     
